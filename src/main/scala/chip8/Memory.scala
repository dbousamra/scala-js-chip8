package chip8

import java.io.{FileInputStream, File}

case class Memory(val data: Array[Int])

object Memory {

  private val MEMORY_SIZE = 0xFFF
  private val MEMORY_BEGIN = 0x200

  val fontSet = Array(0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80) // F)

  def fromFile(rom: File): Memory = {
    val is = new FileInputStream(rom)
    val romData = Stream.continually(is.read).takeWhile(-1 !=).toArray
    fromData(romData)
  }

  def fromData(data: Array[Int]): Memory = {
    val m = Array.concat(Array.fill(MEMORY_BEGIN)(0), data).padTo(MEMORY_SIZE, 0)
    for (i <- 0 until fontSet.length) { m(i) = fontSet(i) }
    Memory(m)
  }
}
